; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\stm32f4xx_it.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\stm32f4xx_it.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp_stm32f4xx -I..\..\User -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx --omf_browse=.\flash\obj\stm32f4xx_it.crf ..\..\User\bsp_stm32f4xx\stm32f4xx_it.c]
                          THUMB

                          AREA ||i.BusFault_Handler||, CODE, READONLY, ALIGN=1

                  BusFault_Handler PROC
;;;101    */
;;;102    void BusFault_Handler(void)
000000  bf00              NOP      
                  |L1.2|
;;;103    {
;;;104      /* 当总线异常时进入死循环 */
;;;105      while (1)
000002  e7fe              B        |L1.2|
;;;106      {
;;;107      }
;;;108    }
;;;109    
                          ENDP


                          AREA ||i.DebugMon_Handler||, CODE, READONLY, ALIGN=1

                  DebugMon_Handler PROC
;;;145    */
;;;146    void DebugMon_Handler(void)
000000  4770              BX       lr
;;;147    {
;;;148    }
;;;149    
                          ENDP


                          AREA ||i.MemManage_Handler||, CODE, READONLY, ALIGN=1

                  MemManage_Handler PROC
;;;85     */
;;;86     void MemManage_Handler(void)
000000  bf00              NOP      
                  |L3.2|
;;;87     {
;;;88       /* 当内存管理异常发生时进入死循环 */
;;;89       while (1)
000002  e7fe              B        |L3.2|
;;;90       {
;;;91       }
;;;92     }
;;;93     
                          ENDP


                          AREA ||i.NMI_Handler||, CODE, READONLY, ALIGN=1

                  NMI_Handler PROC
;;;14     */
;;;15     void NMI_Handler(void)
000000  4770              BX       lr
;;;16     {
;;;17     }
;;;18     
                          ENDP


                          AREA ||i.PendSV_Handler||, CODE, READONLY, ALIGN=1

                  PendSV_Handler PROC
;;;157    */
;;;158    void PendSV_Handler(void)
000000  4770              BX       lr
;;;159    {
;;;160    }
                          ENDP


                          AREA ||i.SVC_Handler||, CODE, READONLY, ALIGN=1

                  SVC_Handler PROC
;;;133    */
;;;134    void SVC_Handler(void)
000000  4770              BX       lr
;;;135    {
;;;136    }
;;;137    
                          ENDP


                          AREA ||i.UsageFault_Handler||, CODE, READONLY, ALIGN=1

                  UsageFault_Handler PROC
;;;117    */
;;;118    void UsageFault_Handler(void)
000000  bf00              NOP      
                  |L7.2|
;;;119    {
;;;120      /* 当用法异常时进入死循环 */
;;;121      while (1)
000002  e7fe              B        |L7.2|
;;;122      {
;;;123      }
;;;124    }
;;;125    
                          ENDP


                          AREA ||i.hard_fault||, CODE, READONLY, ALIGN=2

                  hard_fault PROC
;;;27     */
;;;28     void hard_fault(unsigned int * hardfault_args)
000000  4a20              LDR      r2,|L8.132|
;;;29     {
;;;30     #if 1
;;;31             static unsigned int stacked_r0;
;;;32             static unsigned int stacked_r1;
;;;33             static unsigned int stacked_r2;
;;;34             static unsigned int stacked_r3;
;;;35             static unsigned int stacked_r12;
;;;36             static unsigned int stacked_lr;
;;;37             static unsigned int stacked_pc;
;;;38             static unsigned int stacked_psr;
;;;39             static unsigned int SHCSR;
;;;40             static unsigned char MFSR;
;;;41             static unsigned char BFSR;       
;;;42             static unsigned short int UFSR;
;;;43             static unsigned int HFSR;
;;;44             static unsigned int DFSR;
;;;45             static unsigned int MMAR;
;;;46             static unsigned int BFAR;
;;;47             stacked_r0 = ((unsigned long) hardfault_args[0]);
000002  6801              LDR      r1,[r0,#0]
000004  6011              STR      r1,[r2,#0]  ; stacked_r0
;;;48             stacked_r1 = ((unsigned long) hardfault_args[1]);
000006  4a20              LDR      r2,|L8.136|
000008  6841              LDR      r1,[r0,#4]
00000a  6011              STR      r1,[r2,#0]  ; stacked_r1
;;;49             stacked_r2 = ((unsigned long) hardfault_args[2]);
00000c  4a1f              LDR      r2,|L8.140|
00000e  6881              LDR      r1,[r0,#8]
000010  6011              STR      r1,[r2,#0]  ; stacked_r2
;;;50             stacked_r3 = ((unsigned long) hardfault_args[3]);
000012  4a1f              LDR      r2,|L8.144|
000014  68c1              LDR      r1,[r0,#0xc]
000016  6011              STR      r1,[r2,#0]  ; stacked_r3
;;;51             stacked_r12 = ((unsigned long) hardfault_args[4]);
000018  4a1e              LDR      r2,|L8.148|
00001a  6901              LDR      r1,[r0,#0x10]
00001c  6011              STR      r1,[r2,#0]  ; stacked_r12
;;;52             /*异常中断发生时，这个异常模式特定的物理R14,即lr被设置成该异常模式将要返回的地址*/
;;;53             stacked_lr = ((unsigned long) hardfault_args[5]);   		// 即为错误发生时前次执行语句
00001e  4a1e              LDR      r2,|L8.152|
000020  6941              LDR      r1,[r0,#0x14]
000022  6011              STR      r1,[r2,#0]  ; stacked_lr
;;;54             stacked_pc = ((unsigned long) hardfault_args[6]);
000024  4a1d              LDR      r2,|L8.156|
000026  6981              LDR      r1,[r0,#0x18]
000028  6011              STR      r1,[r2,#0]  ; stacked_pc
;;;55             stacked_psr = ((unsigned long) hardfault_args[7]);
00002a  4a1d              LDR      r2,|L8.160|
00002c  69c1              LDR      r1,[r0,#0x1c]
00002e  6011              STR      r1,[r2,#0]  ; stacked_psr
;;;56             SHCSR = (*((volatile unsigned long *)(0xE000ED24))); 		//系统Handler控制及状态寄存器
000030  491c              LDR      r1,|L8.164|
000032  6809              LDR      r1,[r1,#0]
000034  4a1c              LDR      r2,|L8.168|
000036  6011              STR      r1,[r2,#0]  ; SHCSR
;;;57             MFSR = (*((volatile unsigned char *)(0xE000ED28)));			//存储器管理fault状态寄存器       
000038  491a              LDR      r1,|L8.164|
00003a  1d09              ADDS     r1,r1,#4
00003c  7809              LDRB     r1,[r1,#0]
00003e  4a1b              LDR      r2,|L8.172|
000040  7011              STRB     r1,[r2,#0]
;;;58             BFSR = (*((volatile unsigned char *)(0xE000ED29)));			//总线fault状态寄存器       
000042  4918              LDR      r1,|L8.164|
000044  1d49              ADDS     r1,r1,#5
000046  7809              LDRB     r1,[r1,#0]
000048  4a19              LDR      r2,|L8.176|
00004a  7011              STRB     r1,[r2,#0]
;;;59             UFSR = (*((volatile unsigned short int *)(0xE000ED2A)));	//用法fault状态寄存器               
00004c  4915              LDR      r1,|L8.164|
00004e  1d89              ADDS     r1,r1,#6
000050  8809              LDRH     r1,[r1,#0]
000052  4a18              LDR      r2,|L8.180|
000054  8011              STRH     r1,[r2,#0]
;;;60             HFSR = (*((volatile unsigned long *)(0xE000ED2C))); 		//硬fault状态寄存器                       
000056  4913              LDR      r1,|L8.164|
000058  3108              ADDS     r1,r1,#8
00005a  6809              LDR      r1,[r1,#0]
00005c  4a16              LDR      r2,|L8.184|
00005e  6011              STR      r1,[r2,#0]  ; HFSR
;;;61             DFSR = (*((volatile unsigned long *)(0xE000ED30)));			//调试fault状态寄存器
000060  4910              LDR      r1,|L8.164|
000062  310c              ADDS     r1,r1,#0xc
000064  6809              LDR      r1,[r1,#0]
000066  4a15              LDR      r2,|L8.188|
000068  6011              STR      r1,[r2,#0]  ; DFSR
;;;62             MMAR = (*((volatile unsigned long *)(0xE000ED34)));			//存储管理地址寄存器
00006a  490e              LDR      r1,|L8.164|
00006c  3110              ADDS     r1,r1,#0x10
00006e  6809              LDR      r1,[r1,#0]
000070  4a13              LDR      r2,|L8.192|
000072  6011              STR      r1,[r2,#0]  ; MMAR
;;;63             BFAR = (*((volatile unsigned long *)(0xE000ED38)));			//总线fault地址寄存器
000074  490b              LDR      r1,|L8.164|
000076  3114              ADDS     r1,r1,#0x14
000078  6809              LDR      r1,[r1,#0]
00007a  4a12              LDR      r2,|L8.196|
00007c  6011              STR      r1,[r2,#0]  ; BFAR
;;;64     #endif
;;;65     
;;;66     //		执行程序后，若发生内核错误，则程序会运行到最后的while(1)处。
;;;67     //		此时观察相应的堆栈和故障寄存器值， stacked_lr即为故障发生时进入故障中断前pc的值，
;;;68     //		在MDK软件调试状态下，假如stacked_lr的值为0x1A002D08，
;;;69     //		在左下方的命令窗口输入“pc = 0x1A002D08”，回车，
;;;70     //		即可定位发生错误的代码位置。
;;;71     
;;;72       /* 当硬件失效异常发生时进入死循环 */
;;;73       while (1)
00007e  bf00              NOP      
                  |L8.128|
000080  e7fe              B        |L8.128|
;;;74       {
;;;75       }
;;;76     }
;;;77     
                          ENDP

000082  0000              DCW      0x0000
                  |L8.132|
                          DCD      stacked_r0
                  |L8.136|
                          DCD      stacked_r1
                  |L8.140|
                          DCD      stacked_r2
                  |L8.144|
                          DCD      stacked_r3
                  |L8.148|
                          DCD      stacked_r12
                  |L8.152|
                          DCD      stacked_lr
                  |L8.156|
                          DCD      stacked_pc
                  |L8.160|
                          DCD      stacked_psr
                  |L8.164|
                          DCD      0xe000ed24
                  |L8.168|
                          DCD      SHCSR
                  |L8.172|
                          DCD      MFSR
                  |L8.176|
                          DCD      BFSR
                  |L8.180|
                          DCD      UFSR
                  |L8.184|
                          DCD      HFSR
                  |L8.188|
                          DCD      DFSR
                  |L8.192|
                          DCD      MMAR
                  |L8.196|
                          DCD      BFAR

                          AREA ||.data||, DATA, ALIGN=2

                  stacked_r0
                          DCD      0x00000000
                  stacked_r1
                          DCD      0x00000000
                  stacked_r2
                          DCD      0x00000000
                  stacked_r3
                          DCD      0x00000000
                  stacked_r12
                          DCD      0x00000000
                  stacked_lr
                          DCD      0x00000000
                  stacked_pc
                          DCD      0x00000000
                  stacked_psr
                          DCD      0x00000000
                  SHCSR
                          DCD      0x00000000
                  MFSR
000024  00                DCB      0x00
                  BFSR
000025  00                DCB      0x00
                  UFSR
000026  0000              DCB      0x00,0x00
                  HFSR
                          DCD      0x00000000
                  DFSR
                          DCD      0x00000000
                  MMAR
                          DCD      0x00000000
                  BFAR
                          DCD      0x00000000
